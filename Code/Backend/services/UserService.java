package com.example.lowflightzone.services;

import com.example.lowflightzone.dao.UserDao;
import com.example.lowflightzone.dto.AuthRequest;
import com.example.lowflightzone.dto.UserDto;
import com.example.lowflightzone.entity.FlightSubscription;
import com.example.lowflightzone.entity.User;
import com.example.lowflightzone.exceptions.SubscriptionException;
import com.example.lowflightzone.exceptions.UserException;
import com.example.lowflightzone.repositories.FlightSubscriptionRepository;
import com.example.lowflightzone.repositories.UserRepository;
import com.google.firebase.auth.UserInfo;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class UserService {

    private final UserRepository userRepository;
    private final UserDao userDao;
    private final PasswordEncoder passwordEncoder;
    private final FlightSubscriptionRepository subscriptionRepository;
    private final FlightSubscriptionService subscriptionService;

    @Autowired
    public UserService(UserDao userDao, UserRepository userRepository, FlightSubscriptionRepository subscriptionRepository,
                       FlightSubscriptionService subscriptionService, PasswordEncoder passwordEncoder) {
        this.userDao = userDao;
        this.subscriptionRepository = subscriptionRepository;
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
        this.subscriptionService = subscriptionService;
    }

    public List<UserDto> getAllUsers() {
        return userDao.findAll().stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    public UserDto getUserById(Integer id) {
        User user = userDao.findById(id)
                .orElseThrow(() -> new UserException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: " + id));
        return convertToDto(user);
    }

    // üî• –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è deviceToken
    public void updateDeviceToken(Integer userId, String token) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new UserException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω —Å id=" + userId));
        user.setDeviceToken(token);
        userRepository.save(user);
    }

    @Transactional
    public void updateWebPushSubscription(Integer userId, String endpoint, String p256dh, String auth) {
        // 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new UserException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: " + userId));

        // 2Ô∏è‚É£ –ò—â–µ–º –µ–≥–æ –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        FlightSubscription subscription = subscriptionRepository
                .findFirstByUserIdAndStatus(userId, FlightSubscription.SubscriptionStatus.ACTIVE)
                .orElseThrow(() -> new SubscriptionException("–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è id=" + userId));

        // 3Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Web Push (–µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã)
        if (endpoint != null && !endpoint.isBlank()) {
            subscription.setEndpoint(endpoint);
        }
        if (p256dh != null && !p256dh.isBlank()) {
            subscription.setP256dh(p256dh);
        }
        if (auth != null && !auth.isBlank()) {
            subscription.setAuth(auth);
        }

        // 4Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        subscriptionRepository.save(subscription);
    }



    public UserDto getUserByEmail(String email) {
        User user = userDao.findByEmail(email)
                .orElseThrow(() -> new UserException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: " + email));
        return convertToDto(user);
    }

    public User registerUser(AuthRequest request) {
        if (userRepository.existsByEmail(request.getEmail())) {
            throw new UserException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
        }

        validateCredentials(request.getEmail(), request.getPassword());

        User user = new User();
        user.setEmail(request.getEmail());
        user.setPassword(passwordEncoder.encode(request.getPassword()));
        user.setFirstName(request.getFirstName());
        user.setLastName(request.getLastName());
        user.setPhoneNumber(request.getPhoneNumber());

        return userRepository.save(user);
    }

    private void validateCredentials(String email, String password) {
        if (!email.matches("^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$")) {
            throw new UserException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email");
        }
        if (password.length() < 8) {
            throw new UserException("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤");
        }

        if (!password.matches("^(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=!]).{8,}$")) {
            throw new UserException("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—É—é –∏ —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª");
        }
    }

    public void deleteUser(Integer id) {
        userDao.findById(id)
                .orElseThrow(() -> new UserException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: " + id));
        userDao.deleteById(id);
    }

    @Transactional
    public UserDto updateUser(Integer id, UserDto dto) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new UserException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω —Å id = " + id));

        // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—à–ª–∏
        if (dto.getFirstName() != null) user.setFirstName(dto.getFirstName());
        if (dto.getLastName() != null) user.setLastName(dto.getLastName());
        if (dto.getPhoneNumber() != null) user.setPhoneNumber(dto.getPhoneNumber());

        // ‚ùó Email –º–µ–Ω—è—Ç—å –ø–æ –∂–µ–ª–∞–Ω–∏—é ‚Äî –æ–±—ã—á–Ω–æ –µ–≥–æ –Ω–µ –¥–∞—é—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        if (dto.getPassword() != null && !dto.getPassword().isBlank()) {
            user.setPassword(dto.getPassword()); // —Ç—É—Ç –ª—É—á—à–µ –¥–æ–±–∞–≤–∏—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è!
        }

        userRepository.save(user);
        return convertToDto(user);
    }

    private UserDto convertToDto(User user) {
        UserDto dto = new UserDto();
        dto.setId(user.getId());
        dto.setEmail(user.getEmail());
        dto.setFirstName(user.getFirstName());
        dto.setLastName(user.getLastName());
        dto.setPhoneNumber(user.getPhoneNumber());
        dto.setDeviceToken(user.getDeviceToken());
        dto.setCreatedAt(user.getCreatedAt());

        // ‚úÖ –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (user.getSubscriptions() != null) {
            long activeCount = user.getSubscriptions().stream()
                    .filter(s -> s.getStatus() == FlightSubscription.SubscriptionStatus.ACTIVE)
                    .count();
            dto.setSubscriptionCount((int) activeCount);
        } else {
            dto.setSubscriptionCount(0);
        }

        return dto;
    }
}
