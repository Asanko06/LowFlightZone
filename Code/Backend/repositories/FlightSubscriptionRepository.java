package com.example.lowflightzone.repositories;

import com.example.lowflightzone.entity.FlightSubscription;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface FlightSubscriptionRepository extends JpaRepository<FlightSubscription, Integer> {

    List<FlightSubscription> findByUserEmailAndStatus(
            String userEmail,
            FlightSubscription.SubscriptionStatus status
    );

    List<FlightSubscription> findByStatus(FlightSubscription.SubscriptionStatus status);

    // –ü–æ–∏—Å–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–π—Å –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É –∏ —Å—Ç–∞—Ç—É—Å—É
    @Query("SELECT fs FROM FlightSubscription fs " +
            "WHERE fs.flight.flightNumber = :flightNumber AND fs.status = :status")
    List<FlightSubscription> findByFlightNumberAndStatus(
            String flightNumber,
            FlightSubscription.SubscriptionStatus status
    );

    @Query("SELECT fs FROM FlightSubscription fs " +
            "WHERE fs.user.email = :userEmail " +
            "AND fs.flight.flightNumber = :flightNumber " +
            "AND fs.status = 'ACTIVE'")
    Optional<FlightSubscription> findActiveByUserEmailAndFlightNumber(
            @Param("userEmail") String userEmail,
            @Param("flightNumber") String flightNumber
    );

    // ‚úÖ –ù–æ–≤—ã–π –º–µ—Ç–æ–¥: –Ω–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ user + flight (–ª—é–±–æ–π —Å—Ç–∞—Ç—É—Å)
    Optional<FlightSubscription> findFirstByFlight_FlightNumberAndUser_EmailOrderByIdDesc(
            String flightNumber,
            String email
    );

    boolean existsByFlight_FlightNumberAndUser_EmailAndStatus(
            String flightNumber,
            String userEmail,
            FlightSubscription.SubscriptionStatus status
    );

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä–µ–π—Å
    boolean existsByFlight_FlightNumberAndUser_Email(String flightNumber, String userEmail);

    // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @Query("SELECT fs FROM FlightSubscription fs WHERE fs.user.id = :userId AND fs.status = 'ACTIVE'")
    List<FlightSubscription> findActiveSubscriptionsByUserId(Integer userId);

    // üîé –ù–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–æ–º–µ—Ä—É —Ä–µ–π—Å–∞
    Optional<FlightSubscription> findByUser_EmailAndFlight_FlightNumberAndStatus(
            String userEmail,
            String flightNumber,
            FlightSubscription.SubscriptionStatus status
    );
}
