package com.example.lowflightzone.config;

import com.example.lowflightzone.entity.Airport;
import com.example.lowflightzone.entity.Flight;
import com.example.lowflightzone.repositories.AirportRepository;
import com.example.lowflightzone.repositories.FlightRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.util.*;

@Component
@RequiredArgsConstructor
@Slf4j
public class DataInitializer implements CommandLineRunner {

    private final AirportRepository airportRepository;
    private final FlightRepository flightRepository;

    @Override
    public void run(String... args) {
        log.info("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");
        initializeAirports();
        generateTestFlightsIfEmpty();
    }

    /**
     * ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç –≤ –±–∞–∑–µ
     */
    private void initializeAirports() {
        Map<String, Airport> predefinedAirports = Map.ofEntries(
                Map.entry("SVO", createAirport("SVO", "–®–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ", "–ú–æ—Å–∫–≤–∞", "–†–æ—Å—Å–∏—è", 55.972642, 37.414589, "Europe/Moscow")),
                Map.entry("DME", createAirport("DME", "–î–æ–º–æ–¥–µ–¥–æ–≤–æ", "–ú–æ—Å–∫–≤–∞", "–†–æ—Å—Å–∏—è", 55.408611, 37.906111, "Europe/Moscow")),
                Map.entry("VKO", createAirport("VKO", "–í–Ω—É–∫–æ–≤–æ", "–ú–æ—Å–∫–≤–∞", "–†–æ—Å—Å–∏—è", 55.591531, 37.261486, "Europe/Moscow")),
                Map.entry("LED", createAirport("LED", "–ü—É–ª–∫–æ–≤–æ", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–†–æ—Å—Å–∏—è", 59.800292, 30.262503, "Europe/Moscow")),
                Map.entry("AER", createAirport("AER", "–°–æ—á–∏", "–°–æ—á–∏", "–†–æ—Å—Å–∏—è", 43.449928, 39.956589, "Europe/Moscow")),
                Map.entry("JFK", createAirport("JFK", "John F. Kennedy", "–ù—å—é-–ô–æ—Ä–∫", "–°–®–ê", 40.6413, -73.7781, "America/New_York")),
                Map.entry("LHR", createAirport("LHR", "Heathrow", "–õ–æ–Ω–¥–æ–Ω", "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è", 51.4700, -0.4543, "Europe/London")),
                Map.entry("CDG", createAirport("CDG", "–®–∞—Ä–ª—å-–¥–µ-–ì–æ–ª–ª—å", "–ü–∞—Ä–∏–∂", "–§—Ä–∞–Ω—Ü–∏—è", 49.0097, 2.5479, "Europe/Paris")),
                Map.entry("DXB", createAirport("DXB", "Dubai International", "–î—É–±–∞–π", "–û–ê–≠", 25.2532, 55.3657, "Asia/Dubai")),
                Map.entry("HND", createAirport("HND", "Haneda", "–¢–æ–∫–∏–æ", "–Ø–ø–æ–Ω–∏—è", 35.5494, 139.7798, "Asia/Tokyo")),
                Map.entry("IST", createAirport("IST", "Istanbul", "–°—Ç–∞–º–±—É–ª", "–¢—É—Ä—Ü–∏—è", 41.2753, 28.7519, "Europe/Istanbul")),
                Map.entry("SIN", createAirport("SIN", "Changi", "–°–∏–Ω–≥–∞–ø—É—Ä", "–°–∏–Ω–≥–∞–ø—É—Ä", 1.3644, 103.9915, "Asia/Singapore")),
                Map.entry("LAX", createAirport("LAX", "Los Angeles", "–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å", "–°–®–ê", 33.9416, -118.4085, "America/Los_Angeles"))
        );

        int added = 0;
        for (var entry : predefinedAirports.entrySet()) {
            if (airportRepository.findByIataCode(entry.getKey()).isEmpty()) {
                airportRepository.save(entry.getValue());
                added++;
            }
        }
        log.info("‚úÖ –ê—ç—Ä–æ–ø–æ—Ä—Ç—ã –≥–æ—Ç–æ–≤—ã. –ù–æ–≤—ã—Ö –¥–æ–±–∞–≤–ª–µ–Ω–æ: {}", added);
    }

    /**
     * ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–π—Å–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –≤ –±–∞–∑–µ –Ω–µ—Ç
     */
    private void generateTestFlightsIfEmpty() {
        long existingFlights = flightRepository.count();
        if (existingFlights > 0) {
            log.info("‚úàÔ∏è –†–µ–π—Å—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç ({} —à—Ç.) ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.", existingFlights);
            return;
        }

        List<Airport> airports = airportRepository.findAll();
        if (airports.size() < 2) {
            log.warn("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–π—Å–æ–≤");
            return;
        }

        Random random = new Random();
        List<Flight> newFlights = new ArrayList<>();
        String[] airlines = {"–ê—ç—Ä–æ—Ñ–ª–æ—Ç", "S7 Airlines", "–£—Ä–∞–ª—å—Å–∫–∏–µ –∞–≤–∏–∞–ª–∏–Ω–∏–∏", "Emirates", "Turkish Airlines",
                "Air France", "Lufthansa", "British Airways", "Japan Airlines", "Delta", "United Airlines"};

        Flight.FlightStatus[] statuses = Flight.FlightStatus.values();

        for (int i = 0; i < 50; i++) {
            Airport departure = airports.get(random.nextInt(airports.size()));
            Airport arrival;
            do {
                arrival = airports.get(random.nextInt(airports.size()));
            } while (arrival.equals(departure));

            int delay = random.nextInt(90); // –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 0 –¥–æ 90 –º–∏–Ω
            LocalDateTime scheduledDeparture = LocalDateTime.now().plusHours(random.nextInt(72));
            LocalDateTime scheduledArrival = scheduledDeparture.plusHours(2 + random.nextInt(4));

            Flight flight = new Flight();
            flight.setFlightNumber(generateFlightNumber(random));
            flight.setAirline(airlines[random.nextInt(airlines.length)]);
            flight.setDepartureAirport(departure);
            flight.setArrivalAirport(arrival);
            flight.setScheduledDeparture(scheduledDeparture);
            flight.setScheduledArrival(scheduledArrival);
            flight.setDelayMinutes(delay);
            flight.setStatus(statuses[random.nextInt(statuses.length)]);
            flight.setTerminal("T" + (1 + random.nextInt(3)));
            flight.setGate("G" + (10 + random.nextInt(20)));
            flight.setLastUpdated(LocalDateTime.now());

            // ‚úÖ –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∞ ‚Äî —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º estimated
            if (delay > 0) {
                flight.setEstimatedDeparture(scheduledDeparture.plusMinutes(delay));
                flight.setEstimatedArrival(scheduledArrival.plusMinutes(delay));
            }

            newFlights.add(flight);
        }

        flightRepository.saveAll(newFlights);
        log.info("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {} —Ä–µ–π—Å–æ–≤", newFlights.size());
    }

    private Airport createAirport(String code, String name, String city, String country,
                                  double lat, double lon, String timezone) {
        Airport a = new Airport();
        a.setIataCode(code);
        a.setName(name);
        a.setCity(city);
        a.setCountry(country);
        a.setLatitude(lat);
        a.setLongitude(lon);
        a.setTimezone(timezone);
        return a;
    }

    private String generateFlightNumber(Random random) {
        String[] prefixes = {"SU", "AF", "BA", "LH", "EK", "JL", "UA", "DL", "TK", "U6", "S7"};
        return prefixes[random.nextInt(prefixes.length)] + (1000 + random.nextInt(9000));
    }
}
